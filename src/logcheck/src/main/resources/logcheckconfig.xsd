<?xml version="1.0"?>
<!--
 SLU Dev Inc. CONFIDENTIAL
 DO NOT COPY

Copyright (c) [2012] - [2015] SLU Dev Inc. <info@sludev.com>
All Rights Reserved.

NOTICE:  All information contained herein is, and remains
 the property of SLU Dev Inc. and its suppliers,
 if any.  The intellectual and technical concepts contained
 herein are proprietary to SLU Dev Inc. and its suppliers and
 may be covered by U.S. and Foreign Patents, patents in process,
 and are protected by trade secret or copyright law.
 Dissemination of this information or reproduction of this material
 is strictly forbidden unless prior written permission is obtained
 from SLU Dev Inc.
-->

<!-- Main 'LogCheck' configuration file.  This file specifies the config -->
<!-- for its main parameters. -->
<xs:schema version="1.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified">

    <xs:element name="logCheckConfig">
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                
                <xs:element name="service" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Run as a background service</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="readOnlyLogFile" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Treat the log file as 'Read-Only'</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="createMissingDirs" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Create missing directories instead of throwing an error.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="ignoreStartPosError" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>If there is a discrepancy between the State File and the Log
                            File, e.g. invalid position.  Then ignore the state file</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="collectState" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>DEPRECATED</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="holdingFolder" type="xs:string" minOccurs="0"  maxOccurs="1">
                     <xs:annotation>
                        <xs:documentation>Local folder for keeping downloaded data.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="logEntryBuilders" type="LogEntryBuilderListType" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The type of LogEntry Builder.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="logEntryStores" type="LogEntryStoreListType" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The method for storing log entries. Options include 'elasticsearch', 'console', and 'file'</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="tailerBackupLogNameComps" type="TailerBackupLogNameCompsListType" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>These match the file name grouping the the related file name regex.  Values include FILENAME_PREFIX, INTEGER_INC, TIMESTAMP.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="debugFlags" type="DebugFlagsListType" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Allows passing in miscellaneous debug flags.  Values include LOG_SOURCE_LC_APP.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="pollInterval" type="xs:string" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Seconds between polling the log file.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                
                <xs:element name="emailOnError" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Send an email to this person on failure</xs:documentation>
                    </xs:annotation>
                </xs:element>
                
                <xs:element name="smtpServer" type="xs:string" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>SMTP Server name</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="smtpUser" type="xs:string" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>SMTP User</xs:documentation>
                    </xs:annotation>
                </xs:element>
                
                <xs:element name="smtpPass" type="xs:string" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>SMTP User password</xs:documentation>
                    </xs:annotation>
                </xs:element>
                
                <xs:element name="smtpPort" type="xs:string" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>SMTP Server Port</xs:documentation>
                    </xs:annotation>
                </xs:element>
                
                <xs:element name="smtpProtocol" type="xs:string" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>SMTP Protocol</xs:documentation>
                    </xs:annotation>
                </xs:element>
                
                <xs:element name="dryRun" type="xs:boolean" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Do not update the database.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="idBlockHashType" type="HashType" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Type of hash algorithm.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="idBlockSize" type="xs:integer" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>ID Block size.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="saveState" type="xs:boolean" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Save the completed job to a state file for future continuation.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="tailFromEnd" type="xs:boolean" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>tail from end.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="stopOnEOF" type="xs:boolean" minOccurs="0"  maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Stop tailing the log file when EOF is reached.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="lockFilePath" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Prevent multiple instances of the service from running.</xs:documentation>
                    </xs:annotation>
                </xs:element>
                
                <xs:element name="logFilePath" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Log file to be monitored</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="preferredDir" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Use this directory for creating File-System items with relative paths.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="stdOutFile" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Use this file for Standard Output.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="statusFilePath" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Session data file for running jobs</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="setName" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The name of the running 'Set'</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="stateFilePath" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>State data file for completed jobs</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="stateProcessedLogFilePath" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>State data file for completed Log Files</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="storeLogPath" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The path to the Log Entry log file on disk.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="elasticsearchURL" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Elasticsearch server where logs are stored.  Including protocol and port.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="deDuplicationLogDir" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Directory for storing all deduplication logs.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="deDuplicationDuration" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Do not process logs older than this duration. E.g. "P2DT3H4M"  becomes "2 days, 3 hours and 4 minutes</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="deDuplicationMaxLogsPerFile" type="xs:integer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The maximum number of log entries per deduplication log file.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="deDuplicationMaxLogsBeforeWrite" type="xs:integer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The number of log entries that should be stored before the
                            deduplication information is written to disk.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="deDuplicationIgnoreUntilCount" type="xs:integer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The number of records that can be duplicate records and also ignored.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="deDuplicationSkipUntilCount" type="xs:integer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The number of records that can be duplicate records and also skipped.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="deDuplicationIgnoreUntilPercent" type="xs:integer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The percent of records that can be duplicate records and also ignored.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="deDuplicationSkipUntilPercent" type="xs:integer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The percent of records that can be duplicate records and also skipped.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="deDuplicationDefaultAction" type="DeDuplicationActionType" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The default action after a duplicate record is detected.
                            Actions include 'ignore', 'skip', or 'break'.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="deDuplicationMaxLogFiles" type="xs:integer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The number of log files to keep on disk.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="tailerLogBackupDir" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The directory were log files are backed up.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="tailerBackupLogNameRegex" type="xs:string" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The file regular expression for matching backup log files. E.g. (.*?).(\d).bak.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="verbosity" type="VerbosityType" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>how verbose to make the application.  E.g. none, all, minimum, maximum, debug, info, warn, error.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="stopAfter" type="xs:integer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The number of seconds to run before stopping.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="readLogFileCount" type="xs:integer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The number of log files to read while reading deduplication logs.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="readMaxDeDupeEntries" type="xs:integer" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>The number of deduplication entries to read.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="reOpenLogFile" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Close then re-open the log file between reading</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="tailerBackupReadPriorLog" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Find the prior backup log files.  Read those backup logs before starting.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="validateTailerStats" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Validate Tailer Log File on disk using Statistics periodically to make sure the logs have not been rotated.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="tailerBackupReadLog" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Find the backup log files AFTER they've been rotated.  Read those backups before continuing.</xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="tailerBackupReadLogReverse" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Are backup files ordered oldest to newest?  Or newest to oldest?
                            True if new logs are in lower ordered backup files.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>

                <xs:element name="continue" type="xs:boolean" minOccurs="0" maxOccurs="1">
                    <xs:annotation>
                        <xs:documentation>Continue with the state files from from a previous run</xs:documentation>
                    </xs:annotation>
                </xs:element>

            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="DebugFlagsListType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="flag" type="DebugFlagsType" minOccurs="0" maxOccurs="unbounded" />
        </xs:choice>
    </xs:complexType>

    <xs:simpleType name="DebugFlagsType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="log-source-lc-app"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="TailerBackupLogNameCompsListType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="nameComponent" type="TailerBackupLogNameCompsType" minOccurs="0" maxOccurs="unbounded" />
        </xs:choice>
    </xs:complexType>

    <xs:simpleType name="DeDuplicationActionType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="ignore"/>
            <xs:enumeration value="skip"/>
            <xs:enumeration value="break"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="TailerBackupLogNameCompsType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="filename-prefix"/>
            <xs:enumeration value="integer-inc"/>
            <xs:enumeration value="timestamp"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="LogEntryBuilderListType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="builder" type="LogEntryBuilderTypeType" minOccurs="0" maxOccurs="unbounded" />
        </xs:choice>
    </xs:complexType>

    <xs:simpleType name="LogEntryBuilderTypeType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="singleline"/>
            <xs:enumeration value="multiline delimited"/>
            <xs:enumeration value="ncsa common log"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="LogEntryStoreListType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="store" type="LogEntryStoreTypeType" minOccurs="0" maxOccurs="unbounded" />
        </xs:choice>
    </xs:complexType>

    <xs:simpleType name="LogEntryStoreTypeType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="console"/>
            <xs:enumeration value="simplefile"/>
            <xs:enumeration value="elasticsearch"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="HashType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="md5"/>
            <xs:enumeration value="sha1"/>
            <xs:enumeration value="sha2"/>
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="VerbosityType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="none"/>
            <xs:enumeration value="all"/>
            <xs:enumeration value="minimum"/>
            <xs:enumeration value="maximum"/>
            <xs:enumeration value="debug"/>
            <xs:enumeration value="info"/>
            <xs:enumeration value="warn"/>
            <xs:enumeration value="error"/>
        </xs:restriction>
    </xs:simpleType>

</xs:schema>
